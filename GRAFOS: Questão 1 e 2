#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;

#define INF 999999
#define vertex int

class Graph {
private:
    int V;      
    int A;      

public:
    int **adj;   
    int **dist;  
    int *grau;   

    Graph();     
    ~Graph();

    void criarGrafo(int vertices);
    void lerArquivo(const string &nomeArquivo);
    void inserirAresta(int u, int v, int peso);
    void removerAresta(int u, int v);
    void listar();
    void mostrarMatrizAdj();
    void mostrarGrau();
    void floydWarshall();
};

Graph::Graph() {
    V = 0;
    A = 0;
    adj = nullptr;
    dist = nullptr;
    grau = nullptr;
}

Graph::~Graph() {
    if (adj) {
        for (int i = 0; i < V; i++)
            delete[] adj[i];
        delete[] adj;
    }
    if (dist) {
        for (int i = 0; i < V; i++)
            delete[] dist[i];
        delete[] dist;
    }
    if (grau)
        delete[] grau;
}

void Graph::criarGrafo(int vertices) {
    V = vertices;
    A = 0;

    adj = new int*[V];
    dist = new int*[V];
    grau = new int[V];

    for (int i = 0; i < V; i++) {
        adj[i] = new int[V];
        dist[i] = new int[V];
        grau[i] = 0;
        for (int j = 0; j < V; j++)
            adj[i][j] = 0;
    }
}

void Graph::lerArquivo(const string &nomeArquivo) {
    ifstream arq(nomeArquivo);
    if (!arq.is_open()) {
        cout << "Erro ao abrir o arquivo.\n";
        return;
    }

    int vertices;
    arq >> vertices;
    criarGrafo(vertices);

    int u, v, peso;
    while (arq >> u >> v >> peso)
        inserirAresta(u, v, peso);

    arq.close();
}

void Graph::inserirAresta(int u, int v, int peso) {
    if (u >= 0 && u < V && v >= 0 && v < V) {
        if (adj[u][v] == 0) {
            A++;
            grau[u]++;
        }
        adj[u][v] = peso;
    }
}

void Graph::removerAresta(int u, int v) {
    if (u >= 0 && u < V && v >= 0 && v < V) {
        if (adj[u][v] != 0) {
            adj[u][v] = 0;
            grau[u]--;
            A--;
        }
    }
}

void Graph::listar() {
    cout << "Arestas do grafo:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (adj[i][j] != 0)
                cout << i << " -> " << j << " (peso " << adj[i][j] << ")\n";
        }
    }
}

void Graph::mostrarMatrizAdj() {
    cout << "\nMatriz de adjacencia:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cout << setw(4) << adj[i][j];
        }
        cout << endl;
    }
}

void Graph::mostrarGrau() {
    cout << "\nGrau dos vertices:\n";
    for (int i = 0; i < V; i++)
        cout << "Vertice " << i << ": " << grau[i] << endl;
}

void Graph::floydWarshall() {
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i == j)
                dist[i][j] = 0;
            else if (adj[i][j] != 0)
                dist[i][j] = adj[i][j];
            else
                dist[i][j] = INF;
        }
    }

    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    cout << "\nMatriz de caminhos minimos (Floyd-Warshall):\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << setw(4) << "âˆž";
            else
                cout << setw(4) << dist[i][j];
        }
        cout << endl;
    }
}

int main() {
    Graph G;
    int opcao, u, v, peso;
    string nomeArquivo;

    do {
        cout << "\n--- MENU GRAFO ---\n";
        cout << "1. Ler grafo de arquivo\n";
        cout << "2. Inserir aresta\n";
        cout << "3. Remover aresta\n";
        cout << "4. Listar arestas\n";
        cout << "5. Mostrar matriz de adjacencia\n";
        cout << "6. Mostrar grau dos vertices\n";
        cout << "7. Executar Floyd-Warshall\n";
        cout << "0. Sair\n";
        cout << "Escolha uma opcao: ";
        cin >> opcao;

        switch (opcao) {
            case 1:
                cout << "Nome do arquivo (.txt): ";
                cin >> nomeArquivo;
                G.lerArquivo(nomeArquivo);
                break;
            case 2:
                cout << "Vertice origem, destino e peso: ";
                cin >> u >> v >> peso;
                G.inserirAresta(u, v, peso);
                break;
            case 3:
                cout << "Vertice origem e destino: ";
                cin >> u >> v;
                G.removerAresta(u, v);
                break;
            case 4:
                G.listar();
                break;
            case 5:
                G.mostrarMatrizAdj();
                break;
            case 6:
                G.mostrarGrau();
                break;
            case 7:
                G.floydWarshall();
                break;
            case 0:
                cout << "Encerrando programa...\n";
                break;
            default:
                cout << "Opcao invalida.\n";
        }
    } while (opcao != 0);

    return 0;
}
