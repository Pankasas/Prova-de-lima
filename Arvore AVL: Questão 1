#include <iostream>
#include <algorithm>
using namespace std;

struct No {
    int chave;
    No* esq;
    No* dir;
    int altura;
};

int altura(No* n) {
    if (n == nullptr)
        return 0;
    return n->altura;
}

int maximo(int a, int b) {
    return (a > b) ? a : b;
}

No* novoNo(int valor) {
    No* no = new No;
    no->chave = valor;
    no->esq = nullptr;
    no->dir = nullptr;
    no->altura = 1;
    return no;
}

int fatorBalanceamento(No* n) {
    if (n == nullptr)
        return 0;
    return altura(n->esq) - altura(n->dir);
}

No* rotacaoDireita(No* y) {
    No* x = y->esq;
    No* T2 = x->dir;

    x->dir = y;
    y->esq = T2;

    y->altura = maximo(altura(y->esq), altura(y->dir)) + 1;
    x->altura = maximo(altura(x->esq), altura(x->dir)) + 1;

    return x;
}

No* rotacaoEsquerda(No* x) {
    No* y = x->dir;
    No* T2 = y->esq;

    y->esq = x;
    x->dir = T2;

    x->altura = maximo(altura(x->esq), altura(x->dir)) + 1;
    y->altura = maximo(altura(y->esq), altura(y->dir)) + 1;

    return y;
}

No* inserir(No* no, int chave) {
    if (no == nullptr)
        return novoNo(chave);

    if (chave < no->chave)
        no->esq = inserir(no->esq, chave);
    else if (chave > no->chave)
        no->dir = inserir(no->dir, chave);
    else
        return no;

    no->altura = 1 + maximo(altura(no->esq), altura(no->dir));

    int fb = fatorBalanceamento(no);

    if (fb > 1 && chave < no->esq->chave)
        return rotacaoDireita(no);
    if (fb < -1 && chave > no->dir->chave)
        return rotacaoEsquerda(no);
    if (fb > 1 && chave > no->esq->chave) {
        no->esq = rotacaoEsquerda(no->esq);
        return rotacaoDireita(no);
    }
    if (fb < -1 && chave < no->dir->chave) {
        no->dir = rotacaoDireita(no->dir);
        return rotacaoEsquerda(no);
    }

    return no;
}

No* menorNo(No* no) {
    No* atual = no;
    while (atual->esq != nullptr)
        atual = atual->esq;
    return atual;
}

No* remover(No* raiz, int chave) {
    if (raiz == nullptr)
        return raiz;

    if (chave < raiz->chave)
        raiz->esq = remover(raiz->esq, chave);
    else if (chave > raiz->chave)
        raiz->dir = remover(raiz->dir, chave);
    else {
        if (raiz->esq == nullptr || raiz->dir == nullptr) {
            No* temp = raiz->esq ? raiz->esq : raiz->dir;
            if (temp == nullptr) {
                temp = raiz;
                raiz = nullptr;
            } else
                *raiz = *temp;
            delete temp;
        } else {
            No* temp = menorNo(raiz->dir);
            raiz->chave = temp->chave;
            raiz->dir = remover(raiz->dir, temp->chave);
        }
    }

    if (raiz == nullptr)
        return raiz;

    raiz->altura = 1 + maximo(altura(raiz->esq), altura(raiz->dir));
    int fb = fatorBalanceamento(raiz);

    if (fb > 1 && fatorBalanceamento(raiz->esq) >= 0)
        return rotacaoDireita(raiz);
    if (fb > 1 && fatorBalanceamento(raiz->esq) < 0) {
        raiz->esq = rotacaoEsquerda(raiz->esq);
        return rotacaoDireita(raiz);
    }
    if (fb < -1 && fatorBalanceamento(raiz->dir) <= 0)
        return rotacaoEsquerda(raiz);
    if (fb < -1 && fatorBalanceamento(raiz->dir) > 0) {
        raiz->dir = rotacaoDireita(raiz->dir);
        return rotacaoEsquerda(raiz);
    }

    return raiz;
}

void listar(No* raiz) {
    if (raiz != nullptr) {
        listar(raiz->esq);
        cout << raiz->chave << " ";
        listar(raiz->dir);
    }
}

No* consultar(No* raiz, int chave) {
    if (raiz == nullptr || raiz->chave == chave)
        return raiz;
    if (chave < raiz->chave)
        return consultar(raiz->esq, chave);
    return consultar(raiz->dir, chave);
}

int main() {
    No* raiz = nullptr;
    int opcao, valor;

    do {
        cout << "\n--- MENU ARVORE AVL ---\n";
        cout << "1. Inserir\n";
        cout << "2. Listar\n";
        cout << "3. Remover\n";
        cout << "4. Consultar\n";
        cout << "0. Sair\n";
        cout << "Escolha uma opcao: ";
        cin >> opcao;

        switch (opcao) {
            case 1:
                cout << "Digite o valor a inserir: ";
                cin >> valor;
                raiz = inserir(raiz, valor);
                break;
            case 2:
                cout << "Elementos em ordem: ";
                listar(raiz);
                cout << endl;
                break;
            case 3:
                cout << "Digite o valor a remover: ";
                cin >> valor;
                raiz = remover(raiz, valor);
                break;
            case 4:
                cout << "Digite o valor a consultar: ";
                cin >> valor;
                if (consultar(raiz, valor) != nullptr)
                    cout << "Valor encontrado." << endl;
                else
                    cout << "Valor nao encontrado." << endl;
                break;
            case 0:
                cout << "Encerrando programa..." << endl;
                break;
            default:
                cout << "Opcao invalida!" << endl;
        }
    } while (opcao != 0);

    return 0;
}
